spring.application.name=Rinha Backend 2025

server.port=${SERVER_PORT:9999}
spring.threads.virtual.enabled=true
logging.level.root=${LOGGING_LEVEL:INFO}

# ==============================
# Undertow Settings
# ==============================
server.undertow.threads.io=${UNDERTOW_THREADS_IO:1}
server.undertow.threads.worker=${UNDERTOW_THREADS_WORKER:25}
server.undertow.buffer-size=${UNDERTOW_BUFFER_SIZE:8192}
server.undertow.direct-buffers=${UNDERTOW_DIRECT_BUFFERS:true}

# ==============================
# Payment API Settings
# ==============================
payment.api.summary-delay.ms=${PAYMENT_API_SUMMARY_DELAY:50}
payment.api.async-input=${PAYMENT_API_ASYNC_INPUT:false}

# ==============================
# Payment Processor - Default Client Settings
# ==============================
payment.processor.default.url=${DEFAULT_PAYMENT_PROCESSOR_URL:http://127.0.0.1:8001}
payment.processor.default.connect-timeout=${DEFAULT_PAYMENT_PROCESSOR_CONNECT_TIMEOUT:5000}
payment.processor.default.read-timeout=${DEFAULT_PAYMENT_PROCESSOR_READ_TIMEOUT:30000}

# ==============================
# Payment Processor - Fallback Client Settings
# ==============================
payment.processor.fallback.url=${FALLBACK_PAYMENT_PROCESSOR_URL:http://127.0.0.1:8002}
payment.processor.fallback.connect-timeout=${FALLBACK_PAYMENT_PROCESSOR_CONNECT_TIMEOUT:5000}
payment.processor.fallback.read-timeout=${FALLBACK_PAYMENT_PROCESSOR_READ_TIMEOUT:30000}

# ==============================
# Database Connection Settings
# ==============================
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/rinha_2025}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}

# ==============================
# Database Connection Pool Settings
# ==============================
spring.datasource.hikari.minimum-idle=${DB_POOL_MINIMUM_SIZE:10}
spring.datasource.hikari.maximum-pool-size=${DB_POOL_MAXIMUM_SIZE:20}
spring.datasource.hikari.idle-timeout=${DB_POOL_IDLE_TIMEOUT:60000}

# ==============================
# Payment Processor Settings
# ==============================
# quantidade de workers
payment-processor.number-of-workers=${PAYMENT_PROCESSOR_WORKER:1}
# intervalo intervalo entre execucoes dos workers
payment-processor.worker-interval-millis=${PAYMENT_PROCESSOR_WORKER_INTERVAL:100}
# tamanho maximo da fila
payment-processor.queue-length=${PAYMENT_PROCESSOR_QUEUE_LENGTH:10000}
# quantidade maxima de pagamentos por vez (em condicoes normais)
payment-processor.max-quantity=${PAYMENT_PROCESSOR_MAX_DEQUEUE:100}
# quantidade tentativas - em caso de falha
payment-processor.max-retries=${PAYMENT_PROCESSOR_MAX_RETRIES:2}
# reduzir a quantidade maxima de pagamentos por vez - aplicado quando somente o processador fallback estiver disponivel
payment-processor.max-quantity.reduction-percentage=${PAYMENT_PROCESSOR_MAX_QUANTITY_REDUCTION_PERCENTAGE:0.5}
# adicionar intervalo extra ao worker - aplicado quando somente o processador fallback estiver disponivel
payment-processor.extra-worker-interval-millis=${PAYMENT_PROCESSOR_EXTRA_WORKER_INTERVAL:100}

# ==============================
# Payment Processed Settings
# ==============================
# numero de workers na thread pool
payment-processed.number-of-workers=${PAYMENT_PROCESSED_WORKER:1}
# intervalo intervalo entre execucoes dos workers
payment-processed.worker-interval-millis=${PAYMENT_PROCESSED_WORKER_INTERVAL:100}
# tamanho da fila de confirmacao de pagamentos
payment-processed.queue.length=${PAYMENT_PROCESSED_QUEUE_LENGTH:10000}
# quantidade maxima pare obter na fila por vez
payment-processed.dequeue.max-size=${PAYMENT_PROCESSED_MAX_DEQUEUE:300}
# quantidade tentativas - em caso de falha
payment-processed.max-retries=${PAYMENT_PROCESSED_MAX_RETRIES:2}

# ==============================
# Payment Persistence Settings
#   define thresholds para persistencia
#     (qtde) = quantidade obtida na fila
#       qtde <  individual-threshold -> persistencia individual
#       qtde <  copy-threshold       -> persistencia em lote
#       qtde >= copy-threshold       -> persistencia com copy do postgres
# ==============================
payment-persistence.individual-threshold=${PAYMENT_PERSISTENCE_INDIVIDUAL_THRESHOLD:5}
payment-persistence.copy-threshold=${PAYMENT_PERSISTENCE_COPY_THRESHOLD:500}

# ==============================
# Health Check
# ==============================
# execution
health-check.scheduler-interval.execution=${HEALTH_CHECK_EXECUTION_SCHEDULER_INTERVAL:500}
# update cache
health-check.scheduler-interval.cache=${HEALTH_CHECK_CACHE_SCHEDULER_INTERVAL:1000}

# ==============================
# PaymentProcessor selection settings
# ==============================
# scheduler to calculate the best payment processor
payment-processor-selection.scheduler-interval=${PAYMENT_PROCESSOR_SELECTION_SCHEDULER_INTERVAL:300}
# usar o default quando o timeout do default processor for menor que esse valor
payment-processor-selection.use-default-when-less=${PAYMENT_PROCESSOR_SELECTION_USE_DEFAULT_WHEN_LESS:1000}
# habilita/desabilita o fallback payment processor
payment-processor-selection.fallback.enabled=${PAYMENT_PROCESSOR_SELECTION_FALLBACK_ENABLED:true}
# aplicar vantagem somente se o timeout do default processor for maior
payment-processor-selection.default.advantage-threshold=${PAYMENT_PROCESSOR_SELECTION_DEFAULT_ADVANTAGE_THRESHOLD:2000}
# vantagem para o default payment processor
payment-processor-selection.default.advantage=${PAYMENT_PROCESSOR_SELECTION_DEFAULT_ADVANTAGE:0.1}

spring.autoconfigure.exclude=\
org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\
org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\
org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\
org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\
org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\
org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\
org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\
org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\
org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\
org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\
org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration
